#!/bin/sh

#DgMain                       : dgriffin
#DgAdmin                      : dgriffin ui source
#DevDoc                       : Petra V3.1 개발문서
#petra                        : petraV3.1
#petra-v4.1.0                 : 현재 사용중
#cipher_doc-v4.1.0            : petra cipher V3.2 cc 인증 문서
#petra_patchscript-v4.1.0     : petra v4.1 patch script
#cipher_nhbank-v3.1.0         : 농협은행 지원 용 petra cipher v3.1 소스코드
#mac_client-v4.1.0            : mac용 클라이언트 소스코드
#petra-v5.0                   : petra cloud 팀이 사용 예정인듯
#petra-v5.0-webui             : petra cloud ui 팀이 사용 예정인듯
#petra_tools-v4.1.0           : 이기종 os petra tools
#cipher_ui                    : 레거시 ui 팀 소스코드
#qa_release_test              : 품질관리 테스트 소스코드
#petra_modules                : PetraCrypto V1.0 암호모듈 인증 저장소

sinsiwayRepositories="
@repository petra @comment petra v3.1.0 source code storage @end
@repository petra-v4.1.0 @comment [default] petra 4.1.0 source code storage @end
@repository cipher_doc-v4.1.0 @comment petra cipher V3.2 cc documents @end
@repository cipher_nhbank-v3.1.0 @comment NHBANK petra v3.1.0 Maintenance Source Code @end
@repository petra_tools-v4.1.0 @comment linux or unix tools source code @end
@repository petra-v5.0 @comment Petra v5 source code for cloud team @end
@repository petra-v5.0-webui @comment Petra v5 UI source code for cloud team @end
@repository cipher_ui @comment Legacy UI Source Code @end
@repository petra_modules @comment PetraCrypto V1.0 Encrypt Module Authentication @end
@repository petra_cipher_v3.2_cc @comment petra cipher v3.2 cc source code @end
@repository petra_file_cipher_v3.2_gs @comment petra file cipher v3.2 gs source code @end
"

initialize() {
    binary=$(basename "$0")
    version="1.0.0"
    dateCreated="April 28 2022"

    svn_exe=$(which svn)
    [ ! -f "${svn_exe}" ] && echo "not found [svn] file"

    svnBaseUrl="http://192.168.10.98"
}

showUsage() {
    echo "usage: ${binary} <subcommand>"
    echo "Type '${binary} --version' to see the program version"
    echo
    echo "Availiable subcommand:"
    echo "  help"
    echo "  list, list storage"
    echo "  list <storage>, list <storage> branch"
    echo "  list <storage> tag"
    echo
    echo "  checkout <storage> brunch <branch> [<checkout directory>]"
    echo "  checkout <storage> tag <tag> [<checkout directory>]"
    echo
}

showVersion() {
    echo "${binary},  version ${version}"
    echo "          compiled ${dateCreated}"
    echo ""
}

showStorage() {
    echo "=============================================================="
    echo "< storage > :: Description ::"
    echo "=============================================================="

    local repository
    local comments
    for word in $sinsiwayRepositories; do
        [ "$word" = "@repository" ] && isRepository=1 && continue
        [ "$word" = "@comment" ] && isComments=1 && continue
        [ "$word" = "@end" ] && echo "< ${repository} >     :: $comments ::" && isComments=0 && comments="" && continue
        [ ! -z $isComments ] && [ $isComments -eq 1 ] && comments=$(echo $comments $word)
        [ ! -z $isRepository ] && [ $isRepository -eq 1 ] && repository=$word && isRepository=0
    done
    echo
}

getStorageUrl() {
    local storageName=$1
    echo ${svnBaseUrl}/$storageName
}

showBranches() {
    local storageUrl=$(getStorageUrl $1)
    $svn_exe info ${storageUrl}
    echo "branches"
    echo "=========="
    $svn_exe list ${storageUrl}/branches
    echo
}

showTags() {
    local storageUrl=$(getStorageUrl $1)
    $svn_exe info ${storageUrl}
    echo "tags"
    echo "=========="
    $svn_exe list ${storageUrl}/branches
    echo
}

showStroageDirectory() {
    [ $# -ne "1" ] && showStorage && return
    local storageName=$1

    for storage in ${storageList}; do
        [ ${storage} = ${storageName} ] && showStorageDirectory ${storageName} && break
    done

}

checkoutBranches() {
    local storageName=$1
    local branchName=$2
    local checkoutDirectory=$3
    [ -z ${storageName} ] && echo "<storage> is null" && exit 1
    [ -z ${branchName} ] && echo "<branch> is null" && exit 1
    [ -z ${checkoutDirectory} ] && checkoutDirectory=${storageName}-${branchName}

    local checkoutDirectoryPath=$(pwd)/${checkoutDirectory}
    local storageUrl=$(getStorageUrl $1)
    local checkoutUrl=${storageUrl}/branches/${branchName}

    ${svn_exe} info ${checkoutUrl}

    [ -d "${checkoutDirectoryPath}" ] && printf "initialize directory [${checkoutDirectoryPath}].. " && rm -rf ${checkoutDirectoryPath}
    [ ! -d "${checkoutDirectoryPath}" ] && mkdir ${checkoutDirectoryPath}

    if [ -d "${checkoutDirectoryPath}" ]; then
        echo "[OK]"
    else
        echo "[Error]" && exit 1
    fi

    echo "checkout in ${checkoutDirectoryPath}... "
    ${svn_exe} checkout ${checkoutUrl} ${checkoutDirectoryPath}/src

    cd ${checkoutDirectoryPath}
    mkdir bin config install lib script

    cd ${checkoutDirectoryPath}/install
    [ -d ../src/installer/lib ] && ln -s ../src/installer/lib lib
    [ -d ../src/installer/templates ] && ln -s ../src/installer/templates templates
    [ ! -d log/ ] && mkdir log

    cd ${checkoutDirectoryPath}/bin
    ln -s ../install/lib/petra_config patra_config
    ln -s ../install/lib/petractl

    cd ${checkoutDirectoryPath}
    genSystemScript
    echo
    echo "ok! successfully."
    echo

}

genSystemScript() {
    env_file=env.sh
    echo '#' >$env_file
    echo '# env.sh' >>$env_file
    echo '#' >>$env_file
    echo '# Environments for dgriffin' >>$env_file
    echo '#' >>$env_file
    echo 'SOHA_HOME=`pwd`' >>$env_file
    echo 'SOHA_SVC=demo' >>$env_file
    echo 'export SOHA_HOME SOHA_SVC' >>$env_file
    echo '' >>$env_file
    echo 'sys_name=`uname -s`' >>$env_file
    echo 'case ${sys_name} in' >>$env_file
    echo '  AIX)' >>$env_file
    echo '       LIBPATH=$SOHA_HOME/lib' >>$env_file
    echo '       export LIBPATH' >>$env_file
    echo '       ;;' >>$env_file
    echo '  HP-UX)' >>$env_file
    echo '       SHLIB_PATH=$SOHA_HOME/lib' >>$env_file
    echo '       export SHLIB_PATH' >>$env_file
    echo '       ;;' >>$env_file
    echo '  Linux)' >>$env_file
    echo '       LD_LIBRARY_PATH=$SOHA_HOME/lib' >>$env_file
    echo '       export LD_LIBRARY_PATH' >>$env_file
    echo '       ;;' >>$env_file
    echo '  *)' >>$env_file
    echo '       LD_LIBRARY_PATH=$SOHA_HOME/lib' >>$env_file
    echo '       export LD_LIBRARY_PATH' >>$env_file
    echo '       ;;' >>$env_file
    echo 'esac' >>$env_file
    echo '' >>$env_file
    chmod 755 $env_file
}

checkoutTags() {
    local storageName=$1
    local tagName=$2
    local checkoutDirectory=$3
    [ -z ${storageName} ] && echo "<storage> is null" && exit 1
    [ -z ${tagName} ] && echo "<branch> is null" && exit 1
    [ -z ${checkoutDirectory} ] && checkoutDirectory=${storageName}-${tagName}

    local storageUrl=$(getStorageUrl $1)
    local checkoutUrl=${storageUrl}/branches/${tagName}

    ${svn_exe} info ${checkoutUrl}

    [ -d "${checkoutDirectory}" ] && printf "initialize directory ${checkoutDirectory}.. " && rm -rf ${checkoutDirectory}
    mkdir ${checkoutDirectory}

    if [ -d "${checkoutDirectory}" ]; then
        echo "[OK]"
    else
        echo "[Error]" && exit 1
    fi

    echo "checkout in ${checkoutDirectory}... "
    ${svn_exe} checkout ${checkoutUrl} ${checkoutDirectory}/src

    cd ${checkoutDirectory}
    mkdir bin config install lib script
}

main() {
    initialize

    [ $# -lt "1" ] && echo && echo "Type '${binary} help' for usage." && echo && exit 1
    [ $1 = "--version" ] && showVersion && exit 0
    [ $1 = "help" ] && showUsage && exit 0
    [ $1 = "list" ] && [ -z $2 ] && showStorage && exit 0
    [ $1 = "list" ] && [ $2 = "storage" ] && showStorage && exit 0
    [ $1 = "list" ] && [ -z $3 ] && showBranches $2 && exit 0
    [ $1 = "list" ] && [ $3 = "branch" ] && showBranches $2 && exit 0
    [ $1 = "list" ] && [ $3 = "tag" ] && showTags $2 && exit 0
    [ $1 = "checkout" ] && [ $3 = "branch" ] && checkoutBranches $2 $4 $5 && exit 0
    [ $1 = "checkout" ] && [ $3 = "tag" ] && checkoutTags $2 $4 $5 && exit 0

    echo && echo "unknown <subcommand> '$1'" && echo && echo "Type '${binary} help' for usage." && echo && exit 1
}

main $@
